import streamlit as st
import numpy as np
import onnxruntime as ort
import torch
import torchvision.transforms.functional as TF
from PIL import Image
import os
import glob
import math
import gtsam
import networkx as nx
from gtsam.symbol_shorthand import X
from pyproj import Transformer
from shapely.geometry import LineString, Point as ShpPoint
from shapely.strtree import STRtree
import zipfile
import tempfile
import requests
import plotly.graph_objects as go
import gdown
from scipy.spatial import KDTree


# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
IMG_H, IMG_W = 192, 640
ONNX_MODEL_URL = "https://drive.google.com/uc?export=download&id=173cMcRI354jogXQt6wtLstGxlkssfYBJ"
ONNX_MODEL_PATH = "deepvo_model.onnx"
LSTM_NUM_LAYERS = 2
LSTM_HIDDEN_SIZE = 1000

# –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π, –≤–∑—è—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞
SEQUENCE_STRATEGIES = {
    '07': {'num_poses': 30, 'search_radius': 25.0},
    '10': {'num_poses': 60, 'search_radius': 30.0},
    '06': {'num_poses': 30, 'search_radius': 25.0},
    'default': {'num_poses': 25, 'search_radius': 25.0}
}


# --- –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è Streamlit ---

@st.cache_resource
def download_model(model_url, path):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ —Å Google Drive –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ,
    —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤–∏—Ä—É—Å—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤.
    """
    if not os.path.exists(path):
        st.info(f"üíæ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ONNX –º–æ–¥–µ–ª–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º gdown —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º url
            gdown.download(url=model_url, output=path, quiet=False)
            st.success("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞!")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
            st.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'gdown' (`pip install gdown`) –∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.")
            return None
    return path

@st.cache_resource
def load_onnx_session(model_path):
    try:
        session = ort.InferenceSession(model_path, providers=['CPUExecutionProvider'])
        st.success("‚úÖ ONNX –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        return session
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ONNX –º–æ–¥–µ–ª—å: {e}")
        return None

def to_numpy(tensor):
    return tensor.detach().cpu().numpy() if tensor.requires_grad else tensor.cpu().numpy()


# --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---

def get_raw_prediction_trajectory_onnx(session, image_paths, progress_bar_st):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—ã—Ä—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é ONNX –º–æ–¥–µ–ª–∏.
    –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –ª–æ–≥–∏–∫–∏ PyTorch –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ONNX.
    """
    current_pose = np.eye(4)
    trajectory = [current_pose]
    h_in = np.zeros((LSTM_NUM_LAYERS, 1, LSTM_HIDDEN_SIZE), dtype=np.float32)
    c_in = np.zeros((LSTM_NUM_LAYERS, 1, LSTM_HIDDEN_SIZE), dtype=np.float32)
    total_images = len(image_paths) - 1
    
    for i in range(total_images):
        # –í ONNX –º–æ–¥–µ–ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–≤—ã—á–∏—Ç–∞–Ω–∏–µ 0.5) –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è,
        # –µ—Å–ª–∏ –æ–Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –≥—Ä–∞—Ñ. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∞ –Ω–µ –≤—Å—Ç—Ä–æ–µ–Ω–∞.
        img1 = TF.to_tensor(TF.resize(Image.open(image_paths[i]).convert('RGB'), (IMG_H, IMG_W)))
        img2 = TF.to_tensor(TF.resize(Image.open(image_paths[i+1]).convert('RGB'), (IMG_H, IMG_W)))
        image_sequence = torch.stack([img1, img2]).unsqueeze(0)
        
        ort_inputs = {
            'image_sequence': to_numpy(image_sequence),
            'hidden_in': h_in,
            'cell_in': c_in
        }
        angle_out, trans_out, h_out, c_out = session.run(None, ort_inputs)
        h_in, c_in = h_out, c_out
        
        rel_pose_6dof = np.concatenate([angle_out.squeeze(), trans_out.squeeze()])
        rel_mat = pose_to_SE3(rel_pose_6dof)
        current_pose = current_pose @ rel_mat
        trajectory.append(current_pose)
        progress_bar_st.progress((i + 1) / total_images, text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ {i+1}/{total_images}")
    
    return trajectory

# --- –§—É–Ω–∫—Ü–∏–∏, —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ ---

def utm_transformers(lat, lon):
    """–°–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è WGS84 <-> UTM –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏."""
    zone = int((lon + 180) / 6) + 1
    fwd = Transformer.from_crs('epsg:4326', f'+proj=utm +zone={zone} +ellps=WGS84 +units=m', always_xy=True)
    back = Transformer.from_crs(f'+proj=utm +zone={zone} +ellps=WGS84 +units=m', 'epsg:4326', always_xy=True)
    return fwd, back

def pose_to_SE3(pose_6dof):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç 6DoF –ø–æ–∑—É (rx,ry,rz, tx,ty,tz) –≤ –º–∞—Ç—Ä–∏—Ü—É SE(3)."""
    rx, ry, rz, tx, ty, tz = pose_6dof
    R = gtsam.Rot3.RzRyRx(rx, ry, rz).matrix()
    T = np.eye(4)
    T[:3, :3] = R
    T[:3, 3] = [tx, ty, tz]
    return T

def wrap_to_pi(a):
    """–û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —É–≥–æ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [-pi, pi]."""
    return (a + math.pi) % (2 * math.pi) - math.pi

def find_best_yaw_by_alignment(start_lat, start_lon, local_poses, graph_path, tf_fwd, search_radius_m, num_poses_for_alignment):
    """–ù–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π —É–≥–æ–ª (yaw) –ø—É—Ç–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ VO-—Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å –∫–∞—Ä—Ç–æ–π –¥–æ—Ä–æ–≥."""
    G = nx.read_graphml(graph_path)
    start_utm_e, start_utm_n = tf_fwd.transform(start_lon, start_lat)
    start_point_utm = ShpPoint(start_utm_e, start_utm_n)
    
    candidate_lines_utm = []
    for u, v, _ in G.edges(data=True):
        e_u, n_u = tf_fwd.transform(G.nodes[u]['x'], G.nodes[u]['y'])
        e_v, n_v = tf_fwd.transform(G.nodes[v]['x'], G.nodes[v]['y'])
        road_segment_utm = LineString([(e_u, n_u), (e_v, n_v)])
        if start_point_utm.distance(road_segment_utm) < search_radius_m:
            candidate_lines_utm.append(road_segment_utm)
            
    if not candidate_lines_utm:
        raise ValueError(f"–î–æ—Ä–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–∞–¥–∏—É—Å–µ {search_radius_m}–º.")
    
    yaw_hypotheses = []
    for seg in candidate_lines_utm:
        (e1, n1), (e2, n2) = seg.coords
        yaw_hypotheses.append(math.atan2(e2 - e1, n2 - n1))
        yaw_hypotheses.append(math.atan2(e1 - e2, n1 - n2))
        
    best_yaw, min_avg_error = None, float('inf')
    poses_to_align = local_poses[:min(num_poses_for_alignment, len(local_poses))]
    
    for yaw_h in np.unique(yaw_hypotheses):
        cos_yaw, sin_yaw = math.cos(yaw_h), math.sin(yaw_h)
        rot_mat = np.array([[cos_yaw, sin_yaw], [-sin_yaw, cos_yaw]])
        total_error = 0
        for pose in poses_to_align:
            local_x, local_z = pose[0, 3], pose[2, 3]
            rotated_disp_en = rot_mat @ np.array([local_x, local_z])
            test_point_utm = ShpPoint(start_utm_e + rotated_disp_en[0], start_utm_n + rotated_disp_en[1])
            total_error += min(test_point_utm.distance(line) for line in candidate_lines_utm)
        avg_error = total_error / len(poses_to_align)
        if avg_error < min_avg_error:
            min_avg_error, best_yaw = avg_error, yaw_h
            
    if best_yaw is None:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ yaw.")
        
    st.info(f"–ù–∞–π–¥–µ–Ω –ª—É—á—à–∏–π –Ω–∞—á–∞–ª—å–Ω—ã–π —É–≥–æ–ª: {math.degrees(best_yaw):.2f}¬∞ (–æ—à–∏–±–∫–∞ —Å–æ–≤–º–µ—â–µ–Ω–∏—è {min_avg_error:.2f} –º)")
    return best_yaw

def local_to_utm(local_poses, lat0, lon0, yaw0):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ UTM."""
    tf_fwd, _ = utm_transformers(lat0, lon0)
    e0, n0 = tf_fwd.transform(lon0, lat0)
    cos_yaw, sin_yaw = math.cos(yaw0), math.sin(yaw0)
    R = np.array([[cos_yaw, sin_yaw], [-sin_yaw, cos_yaw]])
    utm_poses = []
    for T in local_poses:
        lx, lz = T[0, 3], T[2, 3]
        de, dn = R @ np.array([lx, lz])
        local_yaw = math.atan2(T[0, 2], T[2, 2])
        global_yaw = wrap_to_pi(yaw0 - local_yaw)
        utm_poses.append((e0 + de, n0 + dn, global_yaw))
    return utm_poses

def build_road_index(graphml_path, tf_fwd, exclude_streets=None):
    """
    –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å (STRtree) –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–æ—Ä–æ–≥.
    –ú–æ–∂–µ—Ç –∏—Å–∫–ª—é—á–∞—Ç—å —É–ª–∏—Ü—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é. (–õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞)
    """
    if exclude_streets is None:
        exclude_streets = []
        
    G = nx.read_graphml(graphml_path)
    segs, heads = [], []
    excluded_count = 0
    
    for u, v, data in G.edges(data=True):
        street_name = data.get('name')
        if street_name and any(excluded_name in street_name for excluded_name in exclude_streets):
            excluded_count += 1
            continue
            
        e_u, n_u = tf_fwd.transform(G.nodes[u]['x'], G.nodes[u]['y'])
        e_v, n_v = tf_fwd.transform(G.nodes[v]['x'], G.nodes[v]['y'])
        segs.append(LineString([(e_u, n_u), (e_v, n_v)]))
        heads.append(math.atan2(e_v - e_u, n_v - n_u))
        
    if excluded_count > 0:
        st.info(f"–ò–∑ –∏–Ω–¥–µ–∫—Å–∞ –∫–∞—Ä—Ç—ã –∏—Å–∫–ª—é—á–µ–Ω–æ {excluded_count} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (—É–ª–∏—Ü—ã: {exclude_streets}).")
        
    return STRtree(segs), segs, heads

def find_closest_road_segment(e, n, heading, road_data, search_radius=30.0, heading_tolerance_deg=60):
    """–ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π —Å–µ–≥–º–µ–Ω—Ç –¥–æ—Ä–æ–≥–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é."""
    index, segs, heads = road_data
    pt = ShpPoint(e, n)
    candidate_indices = list(index.query(pt.buffer(search_radius)))
    if not candidate_indices:
        return None
    best_dist, best_match = float('inf'), None
    for i in candidate_indices:
        fwd_heading = heads[i]
        bwd_heading = wrap_to_pi(heads[i] + math.pi)
        angle_diff1 = abs(wrap_to_pi(heading - fwd_heading))
        angle_diff2 = abs(wrap_to_pi(heading - bwd_heading))
        if min(angle_diff1, angle_diff2) < math.radians(heading_tolerance_deg):
            dist = pt.distance(segs[i])
            if dist < best_dist:
                best_dist = dist
                proj_pt = segs[i].interpolate(segs[i].project(pt))
                road_hdg = fwd_heading if angle_diff1 < angle_diff2 else bwd_heading
                best_match = (proj_pt, road_hdg)
    return best_match


# --- –ö–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ–±–µ—Ä–Ω—É—Ç–∞—è –¥–ª—è Streamlit ---
def run_slam_pipeline(session, image_paths, graphml_path, start_lat, start_lon, seq_id):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–π–ø–ª–∞–π–Ω SLAM, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è Streamlit.
    """
    st.info("–®–∞–≥ 1/4: –†–∞—Å—á–µ—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º (Visual Odometry)...")
    vo_progress = st.progress(0, text="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    local_traj = get_raw_prediction_trajectory_onnx(session, image_paths, vo_progress)
    
    st.info("–®–∞–≥ 2/4: –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è...")
    tf_fwd, tf_back = utm_transformers(start_lat, start_lon)
    strategy = SEQUENCE_STRATEGIES.get(seq_id, SEQUENCE_STRATEGIES['default'])
    optimal_start_yaw = find_best_yaw_by_alignment(
        start_lat, start_lon, local_traj, graphml_path,
        tf_fwd=tf_fwd,
        num_poses_for_alignment=strategy['num_poses'],
        search_radius_m=strategy['search_radius']
    )
    
    st.info("–®–∞–≥ 3/4: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ-—Ñ–∞–∫—Ç–æ—Ä–∞...")
    utm_poses_tuples = local_to_utm(local_traj, start_lat, start_lon, optimal_start_yaw)
    raw_poses = [gtsam.Pose2(e, n, yaw) for e, n, yaw in utm_poses_tuples]

    st.info(f"–®–∞–≥ 4/4: –ó–∞–ø—É—Å–∫ SLAM –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π '{seq_id}'...")
    graph = gtsam.NonlinearFactorGraph()
    initial_estimate = gtsam.Values()
    
    # –ë–∞–∑–æ–≤—ã–µ —à—É–º—ã
    PRIOR_NOISE = gtsam.noiseModel.Diagonal.Sigmas(np.array([0.01, 0.01, np.deg2rad(0.1)]))
    ODOMETRY_NOISE = gtsam.noiseModel.Diagonal.Sigmas(np.array([0.5, 0.5, np.deg2rad(2.0)]))
    MAP_MATCH_NOISE = gtsam.noiseModel.Diagonal.Sigmas(np.array([1.5, 1.5, np.deg2rad(8.0)]))
    
    graph.add(gtsam.PriorFactorPose2(X(0), raw_poses[0], PRIOR_NOISE))
    initial_estimate.insert(X(0), raw_poses[0])
    
    road_data = build_road_index(graphml_path, tf_fwd)
    
    progress_bar = st.progress(0, text=f"GTSAM ({seq_id})...")
    total_poses = len(raw_poses)

    if seq_id == '06':
        st.write("[STRATEGY] –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è SEQ_ID '06'")
        TURN_ZONE_START, APEX_BLIND_START, APEX_BLIND_END, OVERRIDE_START_FRAME = 650, 700, 815, 830
        TARGET_RETURN_HEADING_RAD = -math.pi / 2.0
        ODOMETRY_NOISE_06 = gtsam.noiseModel.Diagonal.Sigmas(np.array([0.2, 0.2, np.deg2rad(1.0)]))
        MAP_MATCH_NOISE_STRICT_06 = gtsam.noiseModel.Diagonal.Sigmas(np.array([1.5, 1.5, np.deg2rad(8.0)]))
        MAP_MATCH_NOISE_LOOSE_06 = gtsam.noiseModel.Diagonal.Sigmas(np.array([10.0, 10.0, np.deg2rad(45.0)]))
        RIGID_CORRECTION_NOISE_06 = gtsam.noiseModel.Diagonal.Sigmas(np.array([0.5, 0.5, np.deg2rad(2.0)]))
        NUDGE_PRIOR_NOISE = gtsam.noiseModel.Diagonal.Sigmas(np.array([3.0, 3.0, np.deg2rad(15.0)]))
        
        T_correction = None
        for i in range(1, total_poses):
            progress_bar.progress(i / total_poses, text=f"GTSAM '06': –ü–æ–∑–∞ {i}/{total_poses}")
            graph.add(gtsam.BetweenFactorPose2(X(i-1), X(i), raw_poses[i-1].inverse().compose(raw_poses[i]), ODOMETRY_NOISE_06))

            # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–ª—á–æ–∫ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞
            if i == APEX_BLIND_START:
                last_good_pose = initial_estimate.atPose2(X(i-1))
                step_size = 1.0
                turn_angle_rad = math.radians(-10)
                relative_nudge = gtsam.Pose2(step_size, 0, turn_angle_rad)
                target_nudge_pose = last_good_pose.compose(relative_nudge)
                graph.add(gtsam.PriorFactorPose2(X(i), target_nudge_pose, NUDGE_PRIOR_NOISE))

            is_in_apex_blind_zone = APEX_BLIND_START <= i < APEX_BLIND_END
            if is_in_apex_blind_zone:
                initial_estimate.insert(X(i), raw_poses[i])
                continue

            map_match_pose = None
            is_in_turn_zone = TURN_ZONE_START <= i < OVERRIDE_START_FRAME
            
            if T_correction is None:
                if i >= OVERRIDE_START_FRAME:
                    match_res_corr = find_closest_road_segment(raw_poses[i].x(), raw_poses[i].y(), TARGET_RETURN_HEADING_RAD, road_data)
                    if match_res_corr:
                        proj_pt, road_hdg = match_res_corr
                        target_pose = gtsam.Pose2(proj_pt.x, proj_pt.y, road_hdg)
                        T_correction = target_pose.compose(raw_poses[i].inverse())
                        map_match_pose = T_correction.compose(raw_poses[i])
                else:
                    match_res = find_closest_road_segment(raw_poses[i].x(), raw_poses[i].y(), raw_poses[i].theta(), road_data)
                    if match_res:
                        proj_pt, road_hdg = match_res
                        map_match_pose = gtsam.Pose2(proj_pt.x, proj_pt.y, road_hdg)
            else:
                corrected_guess = T_correction.compose(raw_poses[i])
                match_res = find_closest_road_segment(corrected_guess.x(), corrected_guess.y(), corrected_guess.theta(), road_data)
                if match_res:
                    proj_pt, road_hdg = match_res
                    map_match_pose = gtsam.Pose2(proj_pt.x, proj_pt.y, road_hdg)
            
            if map_match_pose is not None:
                noise = MAP_MATCH_NOISE_LOOSE_06 if is_in_turn_zone else MAP_MATCH_NOISE_STRICT_06
                if T_correction is not None and i >= OVERRIDE_START_FRAME:
                    noise = RIGID_CORRECTION_NOISE_06
                graph.add(gtsam.PriorFactorPose2(X(i), map_match_pose, noise))
                initial_estimate.insert(X(i), map_match_pose)
            else:
                initial_estimate.insert(X(i), raw_poses[i])

    elif seq_id == '07':
        st.write("[STRATEGY] –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è SEQ_ID '07'")
        STREET_TO_EXCLUDE = ['Acherstra√üe']
        road_data = build_road_index(graphml_path, tf_fwd, exclude_streets=STREET_TO_EXCLUDE)
        
        MAP_MATCH_NOISE_AGGRESSIVE_07 = gtsam.noiseModel.Diagonal.Sigmas(np.array([0.8, 0.8, np.deg2rad(4.0)]))
        ODOMETRY_NOISE_07 = gtsam.noiseModel.Diagonal.Sigmas(np.array([0.7, 0.7, np.deg2rad(4.0)]))
        
        for i in range(1, total_poses):
            progress_bar.progress(i / total_poses, text=f"GTSAM '07': –ü–æ–∑–∞ {i}/{total_poses}")
            graph.add(gtsam.BetweenFactorPose2(X(i-1), X(i), raw_poses[i-1].inverse().compose(raw_poses[i]), ODOMETRY_NOISE_07))
            
            match_result = find_closest_road_segment(
                raw_poses[i].x(), raw_poses[i].y(), raw_poses[i].theta(), 
                road_data, search_radius=15.0, heading_tolerance_deg=45
            )
            
            if match_result:
                proj_pt, road_hdg = match_result
                map_match_pose = gtsam.Pose2(proj_pt.x, proj_pt.y, road_hdg)
                graph.add(gtsam.PriorFactorPose2(X(i), map_match_pose, MAP_MATCH_NOISE_AGGRESSIVE_07))
                initial_estimate.insert(X(i), map_match_pose)
            else:
                initial_estimate.insert(X(i), raw_poses[i])

    elif seq_id == '10':
        st.write("[STRATEGY] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–∏ –ø–æ –≥—Ä–∞—Ñ—É —Å —É—á–µ—Ç–æ–º –±—é–¥–∂–µ—Ç–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏")
        MANEUVER_START_FRAME = 430
        
        # –§–∞–∑–∞ 1: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞
        for i in range(1, MANEUVER_START_FRAME):
            progress_bar.progress(i / total_poses, text=f"GTSAM '10' Phase 1: –ü–æ–∑–∞ {i}/{MANEUVER_START_FRAME}")
            graph.add(gtsam.BetweenFactorPose2(X(i-1), X(i), raw_poses[i-1].inverse().compose(raw_poses[i]), ODOMETRY_NOISE))
            match_result = find_closest_road_segment(raw_poses[i].x(), raw_poses[i].y(), raw_poses[i].theta(), road_data)
            if match_result:
                proj_pt, road_hdg = match_result
                map_match_pose = gtsam.Pose2(proj_pt.x, proj_pt.y, road_hdg)
                graph.add(gtsam.PriorFactorPose2(X(i), map_match_pose, MAP_MATCH_NOISE))
                initial_estimate.insert(X(i), map_match_pose)
            else:
                initial_estimate.insert(X(i), raw_poses[i])
        
        # –§–∞–∑–∞ 2: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –ø–æ –≥—Ä–∞—Ñ—É
        G = nx.read_graphml(graphml_path)
        last_good_pose = initial_estimate.atPose2(X(MANEUVER_START_FRAME - 1))
        last_good_utm = (last_good_pose.x(), last_good_pose.y())
        
        utm_nodes = {node: tf_fwd.transform(data['x'], data['y']) for node, data in G.nodes(data=True)}
        node_ids, node_coords = list(utm_nodes.keys()), np.array(list(utm_nodes.values()))
        kdtree = KDTree(node_coords)
        
        _, start_node_idx = kdtree.query(last_good_utm)
        start_node = node_ids[start_node_idx]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ —Å—ã—Ä–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ VO
        distance_budget = 0.0
        for i in range(MANEUVER_START_FRAME, len(local_traj) - 1):
            p1 = local_traj[i][:3, 3]
            p2 = local_traj[i+1][:3, 3]
            distance_budget += np.linalg.norm(np.array([p2[0]-p1[0], p2[2]-p1[2]]))
        st.info(f"–û—Ü–µ–Ω–æ—á–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏: {distance_budget:.2f} –º.")

        weight_func = lambda u, v, d: float(d.get('length', 1.0))
        distances_from_start = nx.single_source_dijkstra_path_length(G, start_node, weight=weight_func)
        
        candidate_nodes = {n for u, v, data in G.edges(data=True) if 'D√ºrrenwettersbacher Stra√üe' in data.get('name', '') for n in (u,v)}
        if not candidate_nodes: raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∑–ª—ã –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —É–ª–∏—Ü–µ 'D√ºrrenwettersbacher Stra√üe'.")
        
        target_node = None
        best_dist_diff = float('inf')
        for node in candidate_nodes:
            if node in distances_from_start:
                dist = distances_from_start[node]
                if abs(dist - distance_budget) < best_dist_diff:
                    best_dist_diff = abs(dist - distance_budget)
                    target_node = node
        
        if not target_node:
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª –Ω–∞ –Ω—É–∂–Ω–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏.")
        
        path_nodes = nx.dijkstra_path(G, start_node, target_node, weight=weight_func)
        
        step = 2.0
        start_path_utm = utm_nodes[path_nodes[0]]
        pose_on_node = gtsam.Pose2(start_path_utm[0], start_path_utm[1], last_good_pose.theta())
        graph.add(gtsam.PriorFactorPose2(X(MANEUVER_START_FRAME - 1), pose_on_node, PRIOR_NOISE))
        
        frame_idx = MANEUVER_START_FRAME
        path_gen_progress_text = "GTSAM '10' Phase 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–∏..."
        for i in range(len(path_nodes) - 1):
            if frame_idx >= total_poses: break
            progress_bar.progress(frame_idx / total_poses, text=f"{path_gen_progress_text} ({frame_idx}/{total_poses})")
            
            u, v = path_nodes[i], path_nodes[i+1]
            u_utm, v_utm = utm_nodes[u], utm_nodes[v]
            
            segment = LineString([u_utm, v_utm])
            segment_length = segment.length
            if segment_length < 1e-6: continue

            segment_heading = math.atan2(v_utm[0] - u_utm[0], v_utm[1] - u_utm[1])
            num_steps = int(segment_length / step)
            
            for j in range(num_steps):
                if frame_idx >= total_poses: break
                
                new_point_utm = segment.interpolate(j * step)
                new_pose = gtsam.Pose2(new_point_utm.x, new_point_utm.y, segment_heading)
                graph.add(gtsam.PriorFactorPose2(X(frame_idx), new_pose, PRIOR_NOISE))
                initial_estimate.insert(X(frame_idx), new_pose)
                
                frame_idx += 1
            if frame_idx >= total_poses: break
        
        st.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {frame_idx - MANEUVER_START_FRAME} –ø–æ–∑ –≤–¥–æ–ª—å –≥—Ä–∞—Ñ–∞ –∫–∞—Ä—Ç—ã.")
    
        while frame_idx < total_poses:
            progress_bar.progress(frame_idx / total_poses, text=f"GTSAM '10' Phase 3: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ... ({frame_idx}/{total_poses})")
            last_generated_pose = initial_estimate.atPose2(X(frame_idx-1))
            graph.add(gtsam.PriorFactorPose2(X(frame_idx), last_generated_pose, ODOMETRY_NOISE))
            initial_estimate.insert(X(frame_idx), last_generated_pose)
            frame_idx += 1
            
    else: # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        st.write("[STRATEGY] –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
        for i in range(1, total_poses):
            progress_bar.progress(i / total_poses, text=f"GTSAM 'Base': –ü–æ–∑–∞ {i}/{total_poses}")
            graph.add(gtsam.BetweenFactorPose2(X(i-1), X(i), raw_poses[i-1].inverse().compose(raw_poses[i]), ODOMETRY_NOISE))
            
            match_result = find_closest_road_segment(
                raw_poses[i].x(), raw_poses[i].y(),
                raw_poses[i].theta(), road_data,
                heading_tolerance_deg=90
            )
            if match_result:
                proj_pt, road_hdg = match_result
                map_match_pose = gtsam.Pose2(proj_pt.x, proj_pt.y, road_hdg)
                graph.add(gtsam.PriorFactorPose2(X(i), map_match_pose, MAP_MATCH_NOISE))
                initial_estimate.insert(X(i), map_match_pose)
            else:
                initial_estimate.insert(X(i), raw_poses[i])

    progress_bar.empty()
    st.info("–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
    params = gtsam.LevenbergMarquardtParams()
    params.setVerbosity('ERROR')
    optimizer = gtsam.LevenbergMarquardtOptimizer(graph, initial_estimate, params)
    result = optimizer.optimize()
    st.success("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    raw_ll = [tf_back.transform(pose.x(), pose.y())[::-1] for pose in raw_poses]
    slam_ll = [tf_back.transform(result.atPose2(X(i)).x(), result.atPose2(X(i)).y())[::-1] for i in range(result.size())]
    
    return raw_ll, slam_ll


def plot_trajectories(raw_ll, slam_ll):
    """–†–∏—Å—É–µ—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–µ –º–∏—Ä–∞ —Å –ø–æ–º–æ—â—å—é Plotly –∏ Mapbox."""
    MAPBOX_TOKEN = st.secrets.get("MAPBOX_TOKEN")
    if not MAPBOX_TOKEN:
        st.error("–¢–æ–∫–µ–Ω Mapbox –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .streamlit/secrets.toml")
        st.stop()

    fig = go.Figure()

    # --- –¢—Ä–∞—Å—Å–∞ ‚Ññ1: –ò—Å—Ö–æ–¥–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è (VO) ---
    fig.add_trace(go.Scattermapbox(
        mode="lines",
        lon=[p[1] for p in raw_ll],
        lat=[p[0] for p in raw_ll],
        name='–ò—Å—Ö–æ–¥–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è (VO)',
        line=dict(color='rgba(255, 0, 0, 0.6)', width=2) # –ö—Ä–∞—Å–Ω—ã–π, 60% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
    ))

    # --- –¢—Ä–∞—Å—Å–∞ ‚Ññ2: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è (SLAM) ---
    fig.add_trace(go.Scattermapbox(
        mode="lines",
        lon=[p[1] for p in slam_ll],
        lat=[p[0] for p in slam_ll],
        name='–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è (SLAM)',
        line=dict(color='green', width=3) # –Ø—Ä–∫–∞—è –∑–µ–ª–µ–Ω–∞—è –ª–∏–Ω–∏—è
    ))

    # --- –ú–∞—Ä–∫–µ—Ä—ã —Å—Ç–∞—Ä—Ç–∞ –∏ —Ñ–∏–Ω–∏—à–∞ ---
    fig.add_trace(go.Scattermapbox(
        mode="markers",
        lon=[slam_ll[0][1]],
        lat=[slam_ll[0][0]],
        name='–°—Ç–∞—Ä—Ç',
        marker=dict(color='blue', size=12, symbol='star')
    ))
    fig.add_trace(go.Scattermapbox(
        mode="markers",
        lon=[slam_ll[-1][1]],
        lat=[slam_ll[-1][0]],
        name='–§–∏–Ω–∏—à',
        marker=dict(color='purple', size=12, symbol='diamond')
    ))

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–∞ –∫–∞—Ä—Ç—ã ---
    fig.update_layout(
        title="–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã Visual SLAM –Ω–∞ –∫–∞—Ä—Ç–µ –º–∏—Ä–∞",
        hovermode='closest',
        mapbox=dict(
            accesstoken=MAPBOX_TOKEN,
            style='satellite-streets', 
            center=go.layout.mapbox.Center(
                lat=slam_ll[-1][0],
                lon=slam_ll[-1][1]
            ),
            pitch=45,
            zoom=16
        ),
        legend_x=0,
        legend_y=1,
        margin=dict(l=0, r=0, t=40, b=0)
    )

    return fig


KITTI_START_COORDS = {
    '04': {'lat': 49.033603440345, 'lon': 8.3950031909457},
    '06': {'lat': 49.05349304789598, 'lon': 8.39721998765449},
    '07': {'lat': 48.98523696217, 'lon': 8.3936414564418},
    '10': {'lat': 48.97253396005, 'lon': 8.4785980847297},
    'default': {'lat': 48.97253396005, 'lon': 8.4785980847297} # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

# --- –ó–∞—Ç–µ–º –∑–∞–º–µ–Ω–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é main() –Ω–∞ —ç—Ç—É ---
def main():
    st.set_page_config(page_title="DeepVO SLAM", layout="wide")
    st.title("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Visual SLAM –Ω–∞ –±–∞–∑–µ DeepVO")
    st.markdown("""
    **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
    1.  –ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, `.png`).
    2.  –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–æ—Ä–æ–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `.graphml`.
    3.  –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (`04`, `06`, `07`, `10`). –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–¥—Å—Ç–∞–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –î–ª—è —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã–±–µ—Ä–∏—Ç–µ `default` –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é.
    4.  –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É".
    """)

    with st.sidebar:
        st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞")
        zip_file = st.file_uploader("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏", type=['zip'])
        graphml_file = st.file_uploader("2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–æ—Ä–æ–≥ (.graphml)", type=['graphml'])
        st.markdown("---")
        
        st.subheader("3. –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
        # –í–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏/–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        strategy_key = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é/–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 
            options=['04', '06', '07', '10', 'default'], 
            help="–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–¥—Å—Ç–∞–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        coords = KITTI_START_COORDS.get(strategy_key, KITTI_START_COORDS['default'])
        
        # –í–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–ø–µ—Ä—å –±–µ—Ä—É—Ç—Å—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        start_lat = st.number_input("–®–∏—Ä–æ—Ç–∞ (Latitude)", value=coords['lat'], format="%.6f")
        start_lon = st.number_input("–î–æ–ª–≥–æ—Ç–∞ (Longitude)", value=coords['lon'], format="%.6f")
        
        st.markdown("---")
        process_button = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", type="primary", use_container_width=True)

    if process_button and zip_file and graphml_file:
        model_path = download_model(ONNX_MODEL_URL, ONNX_MODEL_PATH)
        if not model_path: st.stop()
        session = load_onnx_session(model_path)
        if not session: st.stop()

        with tempfile.TemporaryDirectory() as temp_dir:
            # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
            zip_path = os.path.join(temp_dir, zip_file.name)
            with open(zip_path, "wb") as f: f.write(zip_file.getbuffer())
            
            image_dir = os.path.join(temp_dir, 'images')
            with zipfile.ZipFile(zip_path, 'r') as z: z.extractall(image_dir)
            
            image_paths = sorted(glob.glob(os.path.join(image_dir, '**', '*.png'), recursive=True))
            if not image_paths:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ .png –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ZIP-–∞—Ä—Ö–∏–≤–µ.")
                st.stop()
            
            graphml_path = os.path.join(temp_dir, graphml_file.name)
            with open(graphml_path, "wb") as f: f.write(graphml_file.getbuffer())

            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª SLAM..."):
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª—é—á –Ω–∞–ø—Ä—è–º—É—é
                    # –õ–æ–≥–∏–∫–∞ –≤ run_slam_pipeline —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç '04' –∫–∞–∫ 'default'
                    slam_strategy_key = 'default' if strategy_key == '04' else strategy_key
                    raw_ll, slam_ll = run_slam_pipeline(session, image_paths, graphml_path, start_lat, start_lon, slam_strategy_key)
                    
                    st.header("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", divider='rainbow')
                    fig = plot_trajectories(raw_ll, slam_ll)
                    st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.exception(e)
    elif process_button:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã.")
        
if __name__ == '__main__':
    main()